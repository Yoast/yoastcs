name: CS

on:
  # Run on all pushes and on all pull requests.
  # Prevent the build from running when there are only irrelevant changes.
  push:
    paths-ignore:
      - '**.md'
  pull_request:
  # Allow manually triggering the workflow.
  workflow_dispatch:

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  checkcs:
    name: 'Basic CS and QA checks'
    runs-on: ubuntu-latest

    env:
      XMLLINT_INDENT: '	'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          coverage: none
          tools: cs2pr

      # Validate the composer.json file.
      # @link https://getcomposer.org/doc/03-cli.md#validate
      - name: Validate Composer installation
        run: composer validate --no-check-all --strict

      - name: 'Composer: adjust dependencies'
        run: |
          # The sniff stage doesn't run the unit tests, so no need for PHPUnit.
          composer remove --no-update --dev phpunit/phpunit --no-scripts --no-interaction
          # Using PHPCS `master` as an early detection system for bugs upstream.
          composer require --no-update --no-scripts squizlabs/php_codesniffer:"dev-master" --no-interaction
          # Using WPCS `master` (=stable). This can be changed back to `dev-develop` after the WPCS 3.0.0 release.
          composer require --no-update --no-scripts wp-coding-standards/wpcs:"dev-master" --no-interaction

      # Install dependencies and handle caching in one go.
      # @link https://github.com/marketplace/actions/install-composer-dependencies
      - name: Install Composer dependencies
        uses: ramsey/composer-install@v2
        with:
          # Bust the cache at least once a month - output format: YYYY-MM.
          custom-cache-suffix: $(date -u "+%Y-%m")

      - name: Install xmllint
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y libxml2-utils

      # Show XML violations inline in the file diff.
      # @link https://github.com/marketplace/actions/xmllint-problem-matcher
      - uses: korelstar/xmllint-problem-matcher@v1

      # Validate the ruleset XML file.
      # @link http://xmlsoft.org/xmllint.html
      - name: Validate ruleset against XML schema
        run: xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./Yoast/ruleset.xml

      # Validate the Docs XML files.
      # @link http://xmlsoft.org/xmllint.html
      # For the build to properly error when validating against a scheme, these each have to be in their own condition.
      - name: Validate the XML sniff docs against schema
        run: xmllint --noout --schema vendor/phpcsstandards/phpcsdevtools/DocsXsd/phpcsdocs.xsd ./Yoast/Docs/*/*Standard.xml

      # Check the code-style consistency of the XML ruleset files.
      - name: Check XML ruleset code style
        run: diff -B --tabsize=4 ./Yoast/ruleset.xml <(xmllint --format "./Yoast/ruleset.xml")

      # Check the codestyle of the files within YoastCS.
      # The results of the CS check will be shown inline in the PR via the CS2PR tool.
      # @link https://github.com/staabm/annotate-pull-request-from-checkstyle/
      - name: Check PHP code style
        id: phpcs
        run: composer check-cs -- --report-full --report-checkstyle=./phpcs-report.xml

      - name: Show PHPCS results in PR
        if: ${{ always() && steps.phpcs.outcome == 'failure' }}
        run: cs2pr ./phpcs-report.xml

      # Check that the sniffs available are feature complete.
      - name: Check sniff feature completeness
        run: composer check-complete
