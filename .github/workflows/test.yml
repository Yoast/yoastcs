name: Test

on:
  # Run on pushes to `main` and on all pull requests.
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - '**.md'
  pull_request:
  # Allow manually triggering the workflow.
  workflow_dispatch:

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PHPCS_HIGHEST: 'dev-master'
  UTILS_HIGHEST: 'dev-develop'
  WPCS_HIGHEST: 'dev-develop'

jobs:
  #### TEST STAGE ####
  test:
    if: ${{ github.ref != 'refs/heads/develop' }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # The GHA matrix works different from Travis.
        # You can define jobs here and then augment them with extra variables in `include`,
        # as well as add extra jobs in `include`.
        # @link https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
        #
        # The matrix is set up so as not to duplicate the builds which are run for code coverage.
        php_version: ['7.3', '8.0', '8.1', '8.2']
        cs_dependencies: ['lowest', 'stable']

        include:
          # Make the matrix complete (when combined with the code coverage builds).
          - php_version: '7.2'
            cs_dependencies: 'stable'
          - php_version: '7.4'
            cs_dependencies: 'stable'

          # Test against dev versions of all CS dependencies with select PHP versions for early detection of issues.
          - php_version: '8.0'
            cs_dependencies: 'dev'
          - php_version: '8.2'
            cs_dependencies: 'dev'

          # Experimental build(s). These are allowed to fail.
          # PHP nightly
          - php_version: '8.3'
            cs_dependencies: 'dev'

    name: "Test${{ matrix.cs_dependencies == 'stable' && ' + Lint' || '' }}: PHP ${{ matrix.php_version }} - CS Deps ${{ matrix.cs_dependencies }}"

    continue-on-error: ${{ matrix.php == '8.3' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # With stable PHPCS dependencies, allow for PHP deprecation notices.
      # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
      - name: Setup ini config
        id: set_ini
        run: |
          if [ "${{ matrix.cs_dependencies }}" != "dev" ]; then
            echo 'PHP_INI=error_reporting=E_ALL & ~E_DEPRECATED, display_errors=On' >> $GITHUB_OUTPUT
          else
            echo 'PHP_INI=error_reporting=-1, display_errors=On' >> $GITHUB_OUTPUT
          fi

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php_version }}
          ini-values: ${{ steps.set_ini.outputs.PHP_INI }}
          coverage: none
          tools: cs2pr

      - name: "Composer: set PHPCS dependencies for tests (dev)"
        if: ${{ matrix.cs_dependencies == 'dev' }}
        run: >
          composer require --no-update --no-scripts --no-interaction --ignore-platform-req=php+
          squizlabs/php_codesniffer:"${{ env.PHPCS_HIGHEST }}"
          phpcsstandards/phpcsutils:"${{ env.UTILS_HIGHEST }}"
          wp-coding-standards/wpcs:"${{ env.WPCS_HIGHEST }}"

      # Install dependencies and handle caching in one go.
      # @link https://github.com/marketplace/actions/install-composer-dependencies
      - name: Install Composer dependencies - normal
        if: ${{ startsWith( matrix.php_version, '8' ) == false }}
        uses: ramsey/composer-install@v2
        with:
          # Bust the cache at least once a month - output format: YYYY-MM.
          custom-cache-suffix: $(date -u "+%Y-%m")

      # For PHP 8/"nightly", we need to install with ignore platform reqs as we're still using PHPUnit 7.
      - name: Install Composer dependencies - with ignore platform
        if: ${{ startsWith( matrix.php_version, '8' ) }}
        uses: ramsey/composer-install@v2
        with:
          composer-options: --ignore-platform-req=php+
          custom-cache-suffix: $(date -u "+%Y-%m")

      - name: "Composer: downgrade PHPCS dependencies for tests (lowest) (with ignore platform)"
        if: ${{ matrix.cs_dependencies == 'lowest' }}
        run: >
          composer update --prefer-lowest --no-scripts --no-interaction --ignore-platform-req=php+
          squizlabs/php_codesniffer
          phpcsstandards/phpcsutils
          wp-coding-standards/wpcs

      - name: Verify installed versions
        run: composer info --no-dev

      - name: Verify installed standards
        run: vendor/bin/phpcs -i

      # The results of the linting will be shown inline in the PR via the CS2PR tool.
      # @link https://github.com/staabm/annotate-pull-request-from-checkstyle/
      - name: Lint against parse errors
        if: ${{ matrix.cs_dependencies == 'stable' }}
        run: composer lint -- --checkstyle | cs2pr

      - name: Run the unit tests - PHP 7.2 - 8.0
        if: ${{ matrix.php_version < '8.1' }}
        run: composer test

      - name: Run the unit tests - PHP 8.1+
        if: ${{ matrix.php_version >= '8.1' }}
        run: composer test -- --no-configuration --bootstrap=./phpunit-bootstrap.php --dont-report-useless-tests

  #### CODE COVERAGE STAGE ####
  # N.B.: Coverage is only checked on the lowest and highest stable PHP versions
  # and a low/high of each major for PHPCS.
  # These builds are left out off the "test" stage so as not to duplicate test runs.
  coverage:
    # No use running the coverage builds if there are failing test builds.
    needs: test
    # The default condition is success(), but this is false when one of the previous jobs is skipped
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')

    runs-on: ubuntu-latest

    strategy:
      matrix:
        # 7.4 should be updated to 8.x when higher PHPUnit versions can be supported.
        php_version: ['7.2', '7.4']
        cs_dependencies: ['lowest', 'dev']

    name: "Coverage${{ matrix.cs_dependencies == 'stable' && ' + Lint' || '' }}: PHP ${{ matrix.php_version }} - CS Deps ${{ matrix.cs_dependencies }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # With stable PHPCS dependencies, allow for PHP deprecation notices.
      # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
      - name: Setup ini config
        id: set_ini
        run: |
          if [ "${{ matrix.cs_dependencies }}" != "dev" ]; then
            echo 'PHP_INI=error_reporting=E_ALL & ~E_DEPRECATED, display_errors=On' >> $GITHUB_OUTPUT
          else
            echo 'PHP_INI=error_reporting=-1, display_errors=On' >> $GITHUB_OUTPUT
          fi

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php_version }}
          ini-values: ${{ steps.set_ini.outputs.PHP_INI }}
          coverage: xdebug
          tools: cs2pr

      - name: "Composer: set PHPCS dependencies for tests (dev)"
        if: ${{ matrix.cs_dependencies == 'dev' }}
        run: >
          composer require --no-update --no-scripts --no-interaction
          squizlabs/php_codesniffer:"${{ env.PHPCS_HIGHEST }}"
          phpcsstandards/phpcsutils:"${{ env.UTILS_HIGHEST }}"
          wp-coding-standards/wpcs:"${{ env.WPCS_HIGHEST }}"

      # Install dependencies and handle caching in one go.
      # @link https://github.com/marketplace/actions/install-composer-dependencies
      - name: Install Composer dependencies
        uses: "ramsey/composer-install@v2"
        with:
          # Bust the cache at least once a month - output format: YYYY-MM.
          custom-cache-suffix: $(date -u "+%Y-%m")

      - name: "Composer: downgrade PHPCS dependencies for tests (lowest)"
        if: ${{ matrix.cs_dependencies == 'lowest' }}
        run: >
          composer update --prefer-lowest --no-scripts --no-interaction
          squizlabs/php_codesniffer
          phpcsstandards/phpcsutils
          wp-coding-standards/wpcs

      - name: Verify installed versions
        run: composer info --no-dev

      - name: Verify installed standards
        run: vendor/bin/phpcs -i

      # The results of the linting will be shown inline in the PR via the CS2PR tool.
      # @link https://github.com/staabm/annotate-pull-request-from-checkstyle/
      - name: Lint against parse errors
        if: ${{ matrix.cs_dependencies == 'dev' }}
        run: composer lint -- --checkstyle | cs2pr

      - name: Run the unit tests with code coverage
        run: composer coverage

      # Uploading the results with PHP Coveralls v1 won't work from GH Actions, so switch the PHP version.
      - name: Switch to PHP 7.4
        if: ${{ success() && matrix.php_version != '7.4' }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: 7.4
          coverage: none

      # Global install is used to prevent a conflict with the local composer.lock in PHP 8.0+.
      - name: Install Coveralls
        if: ${{ success() }}
        run: composer global require php-coveralls/php-coveralls:"^2.5.3" --no-interaction

      - name: Upload coverage results to Coveralls
        if: ${{ success() }}
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
          COVERALLS_PARALLEL: true
          COVERALLS_FLAG_NAME: php-${{ matrix.php_version }}-cs-${{ matrix.cs_dependencies }}
        run: php-coveralls -v -x build/logs/clover.xml

  coveralls-finish:
    needs: coverage
    if: always() && needs.coverage.result == 'success'

    runs-on: ubuntu-latest

    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.COVERALLS_TOKEN }}
          parallel-finished: true
