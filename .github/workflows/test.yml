name: Test

on:
  # Run on pushes to `main` and on all pull requests.
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
  # Allow manually triggering the workflow.
  workflow_dispatch:

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  #### TEST STAGE ####
  test:
    runs-on: ubuntu-latest

    strategy:
      # Keys:
      # - experimental: Whether the build is "allowed to fail".
      matrix:
        # The GHA matrix works different from Travis.
        # You can define jobs here and then augment them with extra variables in `include`,
        # as well as add extra jobs in `include`.
        # @link https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
        #
        # Note: while WPCS 3.0.0 is under development, the matrix will use `dev-master`.
        # Once it has been released and YoastCS has been made compatible, the matrix should switch (back)
        # WPCS `dev-master` to `dev-develop`.
        php_version: ['5.4', '5.5', '5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.1', '8.2']
        phpcs_version: ['3.7.1', 'dev-master']
        wpcs_version: ['2.3.0', 'dev-master']
        experimental: [false]

        #include:
          # Experimental builds. These are allowed to fail.

          # PHP nightly
          #- php_version: '8.3'
          #  phpcs_version: 'dev-master'
          #  wpcs_version: 'dev-master'
          #  experimental: true
          # Test against WPCS unstable. Re-enable when WPCS is not in dev for the next major.
          #- php_version: '8.0'
          #  phpcs_version: 'dev-master'
          #  wpcs_version: 'dev-develop'
          #  experimental: true

          # Test against the next major of PHPCS. Temporarily disabled due to upstream bugs.
          #- php_version: '7.4'
          #  phpcs_version: '4.0.x-dev'
          #  wpcs_version: 'dev-develop'
          #  experimental: true

    name: "Test${{ matrix.phpcs_version == 'dev-master' && matrix.wpcs_version == 'dev-master' && ' + Lint' || '' }}: PHP ${{ matrix.php_version }} - PHPCS ${{ matrix.phpcs_version }} - WPCS ${{ matrix.wpcs_version }}"

    continue-on-error: ${{ matrix.experimental }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # On stable PHPCS versions, allow for PHP deprecation notices.
      # Unit tests don't need to fail on those for stable releases where those issues won't get fixed anymore.
      - name: Setup ini config
        id: set_ini
        run: |
          if [[ "${{ matrix.phpcs_version }}" != "dev-master" && "${{ matrix.phpcs_version }}" != "4.0.x-dev" ]]; then
            echo 'PHP_INI=error_reporting=E_ALL & ~E_DEPRECATED, display_errors=On' >> $GITHUB_OUTPUT
          else
            echo 'PHP_INI=error_reporting=-1, display_errors=On' >> $GITHUB_OUTPUT
          fi

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php_version }}
          ini-values: ${{ steps.set_ini.outputs.PHP_INI }}
          coverage: none
          tools: cs2pr
        env:
          # Token is needed for the PHPCS 4.x run against source.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Set Composer up to download only PHPCS from source for PHPCS 4.x.
      # The source is needed to get the base testcase from PHPCS.
      # All other jobs can use `auto`, which is Composer's default value.
      - name: 'Composer: conditionally prefer source for PHPCS'
        if: ${{ startsWith( matrix.phpcs_version, '4' ) }}
        run: composer config preferred-install.squizlabs/php_codesniffer source

      - name: 'Composer: adjust dependencies'
        run: |
          # Set the PHPCS version to test against.
          composer require --no-update --no-scripts squizlabs/php_codesniffer:"${{ matrix.phpcs_version }}" --no-interaction
          # Set the WPCS version to test against.
          composer require --no-update --no-scripts wp-coding-standards/wpcs:"${{ matrix.wpcs_version }}" --no-interaction

      - name: 'Composer: conditionally remove PHPCSDevtools'
        if: ${{ startsWith( matrix.phpcs_version, '4' ) }}
        # Remove devtools as it will not (yet) install on PHPCS 4.x.
        run: composer remove --no-update --dev phpcsstandards/phpcsdevtools --no-interaction

      # Install dependencies and handle caching in one go.
      # @link https://github.com/marketplace/actions/install-composer-dependencies
      - name: Install Composer dependencies - normal
        if: ${{ startsWith( matrix.php_version, '8' ) == false }}
        uses: ramsey/composer-install@v2

      # For the PHP 8/"nightly", we need to install with ignore platform reqs as we're still using PHPUnit 7.
      - name: Install Composer dependencies - with ignore platform
        if: ${{ startsWith( matrix.php_version, '8' ) }}
        uses: ramsey/composer-install@v2
        with:
          composer-options: --ignore-platform-reqs

      - name: Verify installed standards
        run: vendor/bin/phpcs -i

      # The results of the linting will be shown inline in the PR via the CS2PR tool.
      # @link https://github.com/staabm/annotate-pull-request-from-checkstyle/
      - name: Lint against parse errors
        if: ${{ matrix.phpcs_version == 'dev-master' && matrix.wpcs_version == 'dev-master' }}
        run: composer lint -- --checkstyle | cs2pr

      - name: Run the unit tests - PHP 5.4 - 8.0
        if: ${{ matrix.php_version < '8.1' }}
        run: composer test

      - name: Run the unit tests - PHP 8.1+
        if: ${{ matrix.php_version >= '8.1' }}
        run: composer test -- --no-configuration --dont-report-useless-tests
        env:
          PHPCS_IGNORE_TESTS: 'PHPCompatibility,WordPress'
