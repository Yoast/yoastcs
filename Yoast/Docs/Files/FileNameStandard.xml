<?xml version="1.0"?>
<documentation xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://phpcsstandards.github.io/PHPCSDevTools/phpcsdocs.xsd"
    title="File Name"
    >
    <standard>
    <![CDATA[
    Same as in WP, file names should be lowercase and words should be separated by dashes (not underscores).
    ]]>
    </standard>
    <code_comparison>
        <code title="Valid: File name lowercase with dashes.">
        <![CDATA[
<em>file-name</em>.php
        ]]>
        </code>
        <code title="Invalid: File name mixed case with underscores.">
        <![CDATA[
<em>File_Name</em>.php
        ]]>
        </code>
    </code_comparison>
    <standard>
    <![CDATA[
    For all class files, the file name should reflect the class name without the plugin specific prefix.
The plugin specific prefix is configurable.
    ]]>
    </standard>
    <code_comparison>
        <code title="Valid: File named after class without the plugin prefix.">
        <![CDATA[
<!-- File name: <em>utils</em>.php -->
<?php
class WPSEO_<em>Utils</em> {}
        ]]>
        </code>
        <code title="Invalid: File name contains irrelevant 'class-' and plugin prefix.">
        <![CDATA[
<!-- File name: <em>class-wpseo-</em>utils.php -->
<?php
class WPSEO_Utils {}
        ]]>
        </code>
    </code_comparison>
    <standard>
    <![CDATA[
    For all interface, trait and enum files, the file name should reflect the interface/trait/enum name without the plugin specific prefix and with an "-interface", "-trait" or "-enum" suffix.
    ]]>
    </standard>
    <code_comparison>
        <code title="Valid: File named after interface with '-interface' suffix and without the plugin prefix.">
        <![CDATA[
<!-- File name: <em>output-thing-interface</em>.php -->
<?php
<em>interface</em> Yoast_<em>Output_Thing</em> {}
        ]]>
        </code>
        <code title="Invalid: File name contains plugin prefix and is missing '-trait' suffix.">
        <![CDATA[
<!-- File name: <em>yoast</em>-outline-something.php -->
<?php
<em>trait</em> Yoast_Outline_Something {}
        ]]>
        </code>
    </code_comparison>
    <standard>
    <![CDATA[
    Optionally, it can be enforced that files containing classes, interfaces, traits and enums, should follow the PSR-4 based file name rules.
    According to PSR-4, the file name should reflect the name of the OO structure within the file.
    
    In contrast to the "normal" file name rules, plugin specific prefixes should only be stripped from the file name if they are also stripped off the OO structure name.
    Additionally, interface/trait/enum files are not expected to have a suffix, other than if the interface/trait/enum structure has that suffix in its name already.
    
    The sniff offers a public property, which can be configured from a custom ruleset, to indicate directories which follow PSR-4.
    ]]>
    </standard>
    <code_comparison>
        <code title="Valid: Using a PSR-4 compliant file name for a file in a path marked as using PSR-4.">
        <![CDATA[
<!-- File name: <em>Yoast_Output_Thing</em>.php -->
<?php
class <em>Yoast_Output_Thing</em> {}
        ]]>
        </code>
        <code title="Invalid: Using a Yoast/WP compliant file name for a file in a path marked as using PSR-4.">
        <![CDATA[
<!-- File name: <em>outline-something</em>.php -->
<?php
trait <em>Yoast_Outline_Something</em> {}
        ]]>
        </code>
    </code_comparison>
    <standard>
    <![CDATA[
    Files which don't contain an object structure, but do contain function declarations should have a "-functions" suffix.
    ]]>
    </standard>
    <code_comparison>
        <code title="Valid: File containing functions with '-functions' suffix.">
        <![CDATA[
<!-- File name: some-<em>functions</em>.php -->
<?php
function something() {}
function something_else() {}
        ]]>
        </code>
        <code title="Invalid: File name missing '-functions' suffix.">
        <![CDATA[
<!-- File name: utilities.php -->
<?php
function something() {}
function something_else() {}
        ]]>
        </code>
    </code_comparison>
</documentation>
