<?xml version="1.0"?>
<documentation xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="https://phpcsstandards.github.io/PHPCSDevTools/phpcsdocs.xsd"
    title="Namespace Name"
    >
    <standard>
    <![CDATA[
    A namespace name is expected to start with a package specific prefix.

    Valid prefix(es) can be passed via a custom ruleset.
    ]]>
    </standard>
    <code_comparison>
        <code title="Valid: namespace starting with a package specific prefix.">
        <![CDATA[
namespace <em>Yoast\WP\Plugin\Admin\Forms</em>;
        ]]>
        </code>
        <code title="Invalid: namespace missing a package specific prefix.">
        <![CDATA[
namespace <em>Admin\Forms</em>;
        ]]>
        </code>
    </code_comparison>
    <standard>
    <![CDATA[
    A namespace name is not allowed to be more than 3 levels deep (excluding the prefix).

    It is recommended for the name to be two levels.

    For unit test files, `Tests\(Unit|WP)\(Doubles\)` will be regarded as part of the prefix for this check.
    ]]>
    </standard>
    <code_comparison>
        <code title="Valid: two-level namespace name declaration.">
        <![CDATA[
namespace Yoast\WP\Plugin\<em>Admin\Forms</em>;

namespace Yoast\WP\Plugin\Tests\<em>Admin\Forms</em>;
        ]]>
        </code>
        <code title="Invalid: four-level namespace name declaration.">
        <![CDATA[
namespace Yoast\WP\Plugin\<em>Admin\Forms\Type\Sub</em>;

namespace Yoast\WP\Plugin\Tests\<em>Foo\Bar\Flo\Sub</em>;
        ]]>
        </code>
    </code_comparison>
    <standard>
    <![CDATA[
    The levels in a namespace name should reflect the path to the file.
    Optional, strict PSR-4 compliance for the path to namespace name translation can be enforced by setting the `psr4_paths` property.

    The differences between the "basic" path to namespace translation and strict PSR-4 path to namespace translation, are as follows:
    * The "basic" translation is case-insensitive, while the PSR-4 translation is case-sensitive.
    * The "basic" translation will convert dashes and other punctuation characters in the path to underscores, while the PSR-4 translation enforces that the names match exactly.
    * The "basic" translation will accept any of the provided prefixes, while the strict PSR-4 translation will require the exact prefix assigned to the matched PSR-4 path.
    * The "basic" translation is suitable for use in combination with a Composer classmap for autoloading.
      The PSR-4 compliant translation is suitable for use in combination with the Composer `psr4` autoload directive.

    If the `psr4_paths` property is provided, the PSR-4 based path translation will always take precedence for a file matching any of the PSR-4 paths.

    If a path to name translation would result in an invalid namespace name based on the naming rules for PHP, an error will be thrown to rename the problem directory.
    ]]>
    </standard>
    <code_comparison>
        <code title="Valid: namespace name reflects the path to the file.">
        <![CDATA[
<!-- Path to file: <em>admin/forms/</em>file.php -->
<?php
namespace Yoast\WP\Plugin\<em>Admin\Forms</em>;
        ]]>
        </code>
        <code title="Invalid: namespace name does not reflect the path to the file.">
        <![CDATA[
<!-- Path to file: <em>admin/forms/</em>file.php -->
<?php
namespace Yoast\WP\Plugin\<em>Unrelated</em>;
        ]]>
        </code>
    </code_comparison>
    <code_comparison>
        <code title="Valid: PSR-4 compliant namespace name reflects the path to the file exactly.">
        <![CDATA[
<!-- Path to file: <em>User_Forms/</em>file.php -->
<?php
namespace Yoast\WP\Plugin\<em>User_Forms</em>;
        ]]>
        </code>
        <code title="Invalid: non-PSR-4 compliant namespace name does not reflect the path to the file exactly.">
        <![CDATA[
<!-- Path to file: <em>User_forms/</em>file.php -->
<?php
namespace Yoast\WP\Plugin\<em>user_Forms</em>;
        ]]>
        </code>
    </code_comparison>
</documentation>
