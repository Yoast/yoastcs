<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Yoast" namespace="YoastCS\Yoast" xsi:noNamespaceSchemaLocation="../vendor/squizlabs/php_codesniffer/phpcs.xsd">

	<description>Yoast Coding Standards</description>

	<!--
	#############################################################################
	COMMAND LINE ARGUMENTS
	https://github.com/PHPCSStandards/PHP_CodeSniffer/wiki/Annotated-ruleset.xml
	#############################################################################
	-->

	<!-- Always exclude all files in version management related directories. -->
	<exclude-pattern>*/.git/*</exclude-pattern>
	<exclude-pattern>*/.wordpress-svn/*</exclude-pattern>

	<!-- Always exclude all files in dependency related directories. -->
	<exclude-pattern>*/node_modules/*</exclude-pattern>
	<exclude-pattern>*/vendor(_prefixed)?/*</exclude-pattern>

	<!-- Always exclude files from other plugins which may be installed for test purposes. -->
	<exclude-pattern>*/wp-content/plugins*</exclude-pattern>


	<!--
	#############################################################################
	AUTOLOADING
	PHPCS handles the sniff autoloading, but the Slevomat standard uses an external
	dependency which is not managed via the PHPCS autoloader.
	When using YoastCS stand-alone, that means the Composer autoload needs to be
	loaded (conditionally, which is why there is a bootstrap file).
	#############################################################################
	-->

	<autoload>./../autoload-bootstrap.php</autoload>


	<!--
	#############################################################################
	SNIFF AGAINST THE WordPress RULESET
	Exclude a few select sniffs/errorcodes for specific reasons and
	add configuration for a sniff.
	#############################################################################
	-->

	<!--
		 Trigger error if PHPCSUtils cannot be found.
		 PHPCSUtils does not contain any sniffs, so this rule isn't strictly necessary, but
		 by having this here anyway, if PHPCSUtils is missing, the user will get a
		 descriptive error message during the loading of the ruleset instead of
		 a fatal "class not found" error once the sniffs start running.
	-->
	<rule ref="PHPCSUtils"/>

	<rule ref="WordPress">
		<!-- Set the minimum supported WP version for all sniff which use it in one go.
			 Ref: https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties#minimum-wp-version-to-check-for-usage-of-deprecated-functions-classes-and-function-parameters
		-->
		<properties>
			<property name="minimum_wp_version" value="6.2"/>
		</properties>

		<!-- No need for this sniff as every Yoast travis script includes linting all files. -->
		<exclude name="Generic.PHP.Syntax"/>

		<!-- Excluded in favour of the YoastCS native "else on new line" sniff. -->
		<exclude name="Squiz.ControlStructures.ControlSignature.SpaceAfterCloseBrace"/>

		<!-- Excluded in favour of the YoastCS native Filename sniff. -->
		<exclude name="WordPress.Files.FileName"/>

		<!-- Excluded in favour of the YoastCS ValidHookName sniff which extends the WPCS version. -->
		<exclude name="WordPress.NamingConventions.ValidHookName"/>

		<!-- Excluded in favour of the YoastCS native FileComment sniff (which extends this sniff). -->
		<exclude name="Squiz.Commenting.FileComment"/>
		<!-- As the Yoast sniff extends the upstream sniff, we need to exclude the same error codes
			 as WPCS excludes in the Docs ruleset, but now for the Yoast sniff.
			 Once WPCS introduces a proper WP standards based FileComment sniff, the Yoast
			 sniff should extend that sniff instead of the PHPCS Squiz sniff and
			 these exclusions can then be removed. -->
		<exclude name="Yoast.Commenting.FileComment.IncorrectAuthor"/>
		<exclude name="Yoast.Commenting.FileComment.IncorrectCopyright"/>
		<exclude name="Yoast.Commenting.FileComment.MissingAuthorTag"/>
		<exclude name="Yoast.Commenting.FileComment.MissingSubpackageTag"/>
		<exclude name="Yoast.Commenting.FileComment.MissingCopyrightTag"/>
		<exclude name="Yoast.Commenting.FileComment.PackageTagOrder"/>
		<exclude name="Yoast.Commenting.FileComment.SubpackageTagOrder"/>
		<exclude name="Yoast.Commenting.FileComment.AuthorTagOrder"/>
		<exclude name="Yoast.Commenting.FileComment.CopyrightTagOrder"/>

		<!-- WPCS demands long arrays. YoastCS demands short arrays. -->
		<exclude name="Universal.Arrays.DisallowShortArraySyntax"/>

		<!-- Demanding Yoda conditions is stupid. -->
		<exclude name="WordPress.PHP.YodaConditions"/>

		<!-- A while loop is the only valid control structure where an assignment can be justified. -->
		<exclude name="Generic.CodeAnalysis.AssignmentInCondition.FoundInWhileCondition"/>

		<!-- If a conscious choice has been made for a non-strict comparison, that's ok.
			 I.e. when `strict` has been explicitely set to `false` in an array comparison,
			 it will be allowed. -->
		<exclude name="WordPress.PHP.StrictInArray.FoundNonStrictFalse"/>
	</rule>

	<rule ref="Generic.Formatting.MultipleStatementAlignment">
		<type>error</type>
	</rule>

	<rule ref="WordPress.WP.AlternativeFunctions">
		<properties>
			<property name="exclude" type="array">
				<!-- Excluded in favour of the YoastCS native AlternativeFunctions sniff. -->
				<element value="json_encode"/>
			</property>
		</properties>
	</rule>

	<rule ref="WordPress.Arrays.MultipleStatementAlignment">
		<type>error</type>
		<properties>
			<!-- No need to adjust alignment of large arrays when the item with the largest key is removed. -->
			<property name="exact" value="false"/>
			<!-- Don't align multi-line items if ALL items in the array are multi-line. -->
			<property name="alignMultilineItems" value="!=100"/>
			<!-- Array Assignment operator should always be on the same line as the array key. -->
			<property name="ignoreNewlines" value="false"/>
		</properties>
	</rule>

	<rule ref="Yoast.Files.TestDoubles">
		<properties>
			<property name="doubles_path" type="array">
				<element value="/tests/Doubles"/>
				<element value="/tests/Unit/Doubles"/>
				<element value="/tests/WP/Doubles"/>
			</property>
		</properties>
	</rule>

	<!-- In contrast to WPCS: demand short arrays. -->
	<rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

	<!-- In contrast to WPCS: disallow Yoda conditions. (PHPCS 3.5.0) -->
	<rule ref="Generic.ControlStructures.DisallowYodaConditions"/>


	<!--
	#############################################################################
	SNIFF FOR PHP CROSS-VERSION COMPATIBILITY
	#############################################################################
	-->
	<config name="testVersion" value="7.2-"/>
	<rule ref="PHPCompatibilityWP">
		<include-pattern>*\.php$</include-pattern>
	</rule>


	<!--
	#############################################################################
	ADD SOME SPECIFIC EXTRA SNIFFS
	These may make it into WPCS at some point. If so, they can be removed here.
	#############################################################################
	-->

	<!-- Demand that "else(if)" is on a new line after the scope closer of the preceding if. -->
	<rule ref="Universal.ControlStructures.IfElseDeclaration"/>

	<!-- Error prevention: Make sure the condition in a inline if declaration is bracketed. -->
	<rule ref="Squiz.ControlStructures.InlineIfDeclaration"/>

	<!-- Error prevention: Make sure arithmetics are bracketed. -->
	<rule ref="Squiz.Formatting.OperatorBracket.MissingBrackets"/>

	<!-- CS: ensure exactly one blank line before each property declaration. -->
	<rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>

	<!-- CS: don't allow "// end class" comments and the likes. -->
	<rule ref="PSR12.Classes.ClosingBrace"/>

	<!-- CS: enforce consistent indentation of chained object method calls. -->
	<rule ref="PEAR.WhiteSpace.ObjectOperatorIndent">
		<properties>
			<property name="multilevel" value="true"/>
		</properties>
	</rule>

	<!-- CS: enforce that boolean operators between conditions in multi-line control structures are
		 consistently at the start or end of the line, not a mix of both. -->
	<rule ref="PSR12.ControlStructures.BooleanOperatorPlacement">
		<properties>
			<!-- Only allow them at the start of the line. -->
			<property name="allowOnly" value="first"/>
		</properties>
	</rule>

	<!-- CS: Enforces that a PHP open tag is on a line by itself when used at the start of a PHP-only file. -->
	<!-- PHPCS 3.5.0: This sniff may be added to WPCS in due time and can then be removed from this ruleset. -->
	<rule ref="PSR12.Files.OpenTag"/>

	<!-- ##### Documentation Sniffs vs empty index files ##### -->

	<!-- Exclude the 'empty' index files from some documentation checks -->
	<rule ref="Yoast.Commenting.FileComment">
		<exclude-pattern>*/index\.php</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.InlineComment.NoSpaceBefore">
		<exclude-pattern>*/index\.php</exclude-pattern>
	</rule>


	<!--
	#############################################################################
	SNIFFS TO ENFORCE CODE MODERNIZATION
	#############################################################################
	-->

	<!-- Undo the WPCS-Extra silencing of the "no nested dirnames, use $levels" notice (PHP 7.0+). -->
	<rule ref="Modernize.FunctionCalls.Dirname.Nested">
		<severity>5</severity>
	</rule>

</ruleset>
